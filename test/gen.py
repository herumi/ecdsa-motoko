N = 3

def pack(v, n = N):
	s = ''
	for i in range(n):
		if i == 0:
			s = f'({v}0'
		else:
			s += f',{v}{i}'
	return s + ")"

def toStr():
	print('func toStr(x : F) : Text {')
	for i in range(N):
		head = 's := s #"," #' if i > 0 else 'var s ="("#'
		print(f'  {head} Hex.fromNat(Nat64.toNat(x.{i}));') 
	print('  s#")"')
	print('};')

def toNat(name,n=N):
	print(f'func {name}(x : {"F" if n==N else "FD"}) : Nat {{')
	print(f'  var v = Nat64.toNat(x.{n-1});')
	for i in range(1, n):
		print(f'  v := v * 0x100000000 + Nat64.toNat(x.{n-1-i});')
	print('  v')
	print('};')

def fromNat():
	print('func fromNat(x : Nat) : F {')
	print(f'  var v = x;')
	for i in range(0, N):
		print(f'  let v{i} = Nat64.fromNat(v % 0x100000000);')
		print(f'  v := v / 0x100000000;')
	print(f'  {pack("v")}')
	print('};')

def cmp():
	print('func cmp(x : F, y : F) : Order.Order {')
	for i in range(N):
		print(f'  if (x.{N-1-i} < y.{N-1-i}) return #less;')
		print(f'  if (x.{N-1-i} > y.{N-1-i}) return #greater;')
	print('  #equal')
	print('};')

# return x+y
def addPre():
	print(f'// ret.{N-1} may has (1<<32) as CF')
	print('func addPre(x : F, y : F) : F {')
	for i in range(N):
		s = '' if i == 0 else f' +% c{i-1}'
		if i < N-1:
			print(f'  let t{i} = x.{i} +% y.{i}{s};')
			print(f'  let z{i} = t{i} & 0xffffffff;')
			print(f'  let c{i} = t{i} >> 32;')
		else:
			print(f'  let z{i} = x.{i} +% y.{i}{s};')
	print(f'  {pack("z")}')
	print('};')

# return x-y
# assume x>=y
def subPre():
	print('func subPre(x : F, y : F) : (F, Nat64) {')
	for i in range(N):
		s = '' if i == 0 else f' -% c{i-1}'
		print(f'  let t{i} = x.{i} -% y.{i}{s};')
		print(f'  let z{i} = t{i} & 0xffffffff;')
		print(f'  let c{i} = t{i} >> 63;')
	print(f'  ({pack("z")}, c{N-1})')
	print('};')

# return x*y
def mulPre():
	print('func mulPre(x : F, y : F) : FD {')
	print('  var t : Nat64 = 0;')
	print('  var L : Nat64 = 0;')
	print('  var H : Nat64 = 0;')
	for i in range(N*2-1):
		for j in range(N+1):
			if j < N and 0 <= i-j < N:
				print(f'  t := x.{j} *% y.{i-j};')
				print(f'  L := L +% (t & 0xffffffff);')
				print(f'  H := H +% (t >> 32);')
		print(f'  let z{i} = L;')
		print(f'  L := H; H := 0;')
	print(f'  let z{N*2-1} = L;')
	print(f'  {pack("z", N*2)}')
	print('};')

# return (x+y)%p
def add():
	print("""func add(x : F, y : F) : F {
  let z = addPre(x,y);
  if (cmp(z, p) != #less) subPre(z, p).0 else z
};""")

# return (x-y)%p
def sub():
	print("""func sub(x : F, y : F) : F {
  let (z, CF) = subPre(x,y);
  if (CF == 0) z else addPre(z, p)
};""")

header="""// generated by test/gen.py
import Debug "mo:base/Debug";
import Nat "mo:base/Nat";
import Nat64 "mo:base/Nat64";
import Hex "../src/hex";
import Order "mo:base/Order";
"""

def printPrime():
	p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
	s = 'let p : F = ('
	for i in range(N):
		v = p & 0xffffffff
		p >>= 32
		if i > 0:
			s += ', '
		s += hex(v)
	s += ');'
	print(s)

def printType(name, n):
	s = f'type {name} = ('
	for i in range(n):
		if i > 0:
			s += ', '
		s += 'Nat64'
	s += ');'
	print(s)


print(header)
printType("F", N)
printType('FD', N*2)
printPrime()
toNat('toNat', N)
toNat('DtoNat', N*2)
fromNat()
toStr()
cmp()
subPre()
addPre()
add()
sub()
mulPre()


print("""
let a : F = (5,2,3);
let b : F = (4,5,6);
let c = sub(a, b);
let d = add(c, b);
Debug.print("c=" # toStr(c));
Debug.print("d=" # toStr(d));
Debug.print("d=" # Nat.toText(toNat(d)));
Debug.print("e=" # toStr(fromNat(toNat(d))));
let x = mulPre((0x12345678, 0x88888888, 0xffffffff), (0xff001122, 0x33334444, 0x55557777));
Debug.print("x=" # Nat.toText(DtoNat(x)));
""")
